import { Vector2D, randomId, inputEmitter } from "../..";

/**
 * @typedef {Object} Dimensions
 * @property {number} width - The width of the object.
 * @property {number} height - The height of the object.
 */

/**
 * A class representing a node in a hierarchical structure, which can have a parent, children, and associated properties.
 */
export class BNode {
  /**
   * @type {Array<string>}
   * @description An array of inherited properties or methods from parent classes.
   */
  __inherit = [];

  /**
   * @type {string}
   * @description A unique identifier for the instance, generated by the randomId function.
   */
  __id = randomId();

  /**
   * @type {string}
   * @description The name of the class, typically used for identification or debugging.
   */
  __nname = BNode.name;

  /**
   * @type {BNode|null}
   * @description A reference to the parent node in the hierarchy.
   */
  parent = null;

  /**
   * @type {Object|null}
   * @description A reference to a script associated with the node, if any.
   */
  script = null;

  /**
   * @type {Array<BNode>}
   * @description An array of child nodes that are part of this node.
   */
  children = [];

  /**
   * @type {Vector2D}
   * @description The position of the node in 2D space, represented as a Vector2D instance.
   */
  pos = new Vector2D();

  /**
   * @type {Dimensions}
   * @description An object representing the dimensions of the node, with width (w) and height (h).
   */
  dim = { w: 0, h: 0 };

  /**
   * Initializes the node. This method can be overridden by subclasses to perform setup tasks.
   */
  start() {}

  /**
   * Prepares the node and its children before the update cycle.
   * This method sets the previous position and adjusts children's positions relative to the parent.
   */
  e_preStart() {
    this._prevPos = this.pos.copy();

    // Fix children position relative to parent
    for (const c of this.children) {
      c.pos.x = this.pos.x + c.pos.x;
      c.pos.y = this.pos.y + c.pos.y;
    }
  }

  /**
   * Updates the node's state. This method can be overridden by subclasses to implement custom behavior.
   */
  update() {}

  /**
   * Draws the node. This method can be overridden by subclasses to implement custom rendering.
   */
  draw() {}

  /**
   * Post-update processing for the node, adjusting children's positions based on the node's movement.
   *
   * @param {number} _dt - The delta time since the last update.
   */
  e_postUpdate(_dt) {
    const diffx = this.pos.x - this._prevPos.x;
    const diffy = this.pos.y - this._prevPos.y;

    for (const c of this.children) {
      c.pos.x += diffx;
      c.pos.y += diffy;
    }
    this._prevPos = this.pos.copy();
  }

  /**
   * Attaches the input controller to the node, allowing it to receive input events.
   */
  attachController() {
    inputEmitter.subscribe(this);
  }

  /**
   * Appends a child node to this node.
   *
   * @param {BNode} el - The child node to be appended.
   * @returns {number} - The new length of the children array after the child has been added.
   * @throws {Error} - Throws an error if the parent does not have required properties for the child node.
   */
  append(el) {
    el.parent = this;

    for (const key of el.__inherit) {
      if (!this[key]) {
        throw new Error(
          `Parent doesn't have property "${key}" or it is uninitialized, but it's required by childNode.`,
        );
      }
      el[key] = this[key];
    }

    return this.children.push(el);
  }
}
